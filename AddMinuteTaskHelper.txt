({
    
     validateMinuteForm: function(component) {
         var validMinuteForm = component.find('minuteForm').reduce(function (validSoFar,inputCmp){
             inputCmp.showHelpMessageIfInvalid();
             inputCmp.set('v.validity',{valid:false, badInput:true});
             return validSoFar && inputCmp.get('v.validity').valid;},true);
         return validMinuteForm;
    },
    
    // Function used to populate the custom lookup Related To
    populateRelatedToLookup: function(component,account) {
        
        component.find("lookupRelatedTo").set("v.selectedRecord" , account); 
        
        var forclose = component.find("lookupRelatedTo").find("lookup-pill");
        $A.util.addClass(forclose, 'slds-show');
        $A.util.removeClass(forclose, 'slds-hide');
        
        var forclose = component.find("lookupRelatedTo").find("searchRes");
        $A.util.addClass(forclose, 'slds-is-close');
        $A.util.removeClass(forclose, 'slds-is-open');
        
        var lookUpTarget = component.find("lookupRelatedTo").find("lookupField");
        $A.util.addClass(lookUpTarget, 'slds-hide');
        $A.util.removeClass(lookUpTarget, 'slds-show'); 
    },
           
    populateProductLookup: function(component, product) {
        component.find("pdt1").set("v.selectedRecord" , product); 
        
        var forclose = component.find("pdt1").find("lookup-pill");
        $A.util.addClass(forclose, 'slds-show');
        $A.util.removeClass(forclose, 'slds-hide');
        
        var forclose = component.find("pdt1").find("searchRes");
        $A.util.addClass(forclose, 'slds-is-close');
        $A.util.removeClass(forclose, 'slds-is-open');
        
        var lookUpTarget = component.find("pdt1").find("lookupField");
        $A.util.addClass(lookUpTarget, 'slds-hide');
        $A.util.removeClass(lookUpTarget, 'slds-show'); 
    },
     // Function used to populate the custom lookup 'Assigned To'
    populateAssignToLookup: function(component,user) {
        component.find("lookupAssignTo").set("v.selectedRecord" , user); 
        
        var forclose = component.find("lookupAssignTo").find("lookup-pill");
        $A.util.addClass(forclose, 'slds-show');
        $A.util.removeClass(forclose, 'slds-hide');
        
        var forclose = component.find("lookupAssignTo").find("searchRes");
        $A.util.addClass(forclose, 'slds-is-close');
        $A.util.removeClass(forclose, 'slds-is-open');
        
        var lookUpTarget = component.find("lookupAssignTo").find("lookupField");
        $A.util.addClass(lookUpTarget, 'slds-hide');
        $A.util.removeClass(lookUpTarget, 'slds-show'); 
    },
 // Function used to populate the Multiselect lookup 'Internal participants'
    populateInternalparticipantsLookup: function(component,user) {
        component.find("lookupUsersName").set("v.selectedRecord" , user); 
        
        var forclose = component.find("lookupUsersName").find("lookup-pill");
        $A.util.addClass(forclose, 'slds-show');
        $A.util.removeClass(forclose, 'slds-hide');
        
        var forclose = component.find("lookupUsersName").find("searchRes");
        $A.util.addClass(forclose, 'slds-is-close');
        $A.util.removeClass(forclose, 'slds-is-open');
        
        var lookUpTarget = component.find("lookupUsersName").find("lookupField");
        $A.util.addClass(lookUpTarget, 'slds-hide');
        $A.util.removeClass(lookUpTarget, 'slds-show'); 
    },
    
    // Function used to populate the custom lookup 'Assigned To' linked to the creation of the follow up Task
    populateAssignToFollowTask: function(component,user,index) 
    {
        var listCustomLookup = component.find("lookupAssignToFollowTask");
        
        var forclose = listCustomLookup[index].find("lookup-pill");
        $A.util.addClass(forclose, 'slds-show');
        $A.util.removeClass(forclose, 'slds-hide');
        
        var forclose = listCustomLookup[index].find("searchRes");
        $A.util.addClass(forclose, 'slds-is-close');
        $A.util.removeClass(forclose, 'slds-is-open');
        
        var lookUpTarget = listCustomLookup[index].find("lookupField");
        $A.util.addClass(lookUpTarget, 'slds-hide');
        $A.util.removeClass(lookUpTarget, 'slds-show');
                
    },
    
     // Function used to populate the custom lookup 'Contact Name'
    populateContactNameLookup: function(component,contact) {
        console.log("######         ",  contact)
        component.find("lookupContactName").set("v.lstSelectedRecords" , contact);
        var forclose = component.find("lookupContactName").find("lookup-pill");
        $A.util.addClass(forclose, 'slds-show');
        $A.util.removeClass(forclose, 'slds-hide');
        
        var forclose = component.find("lookupContactName").find("searchRes");
        $A.util.addClass(forclose, 'slds-is-close');
        $A.util.removeClass(forclose, 'slds-is-open');
    },
    
     // Function used to populate the custom lookup 'Assigned To' linked to the creation of the follow up Task (iteration 1)
    populateAssignToFollowTaskInit: function(component,user) {
        
        component.find("lookupAssignToFollowTask").set("v.selectedRecord" , user); 
        
        var forclose = component.find("lookupAssignToFollowTask").find("lookup-pill");
        $A.util.addClass(forclose, 'slds-show');
        $A.util.removeClass(forclose, 'slds-hide');
        
        var forclose = component.find("lookupAssignToFollowTask").find("searchRes");
        $A.util.addClass(forclose, 'slds-is-close');
        $A.util.removeClass(forclose, 'slds-is-open');
        
        var lookUpTarget = component.find("lookupAssignToFollowTask").find("lookupField");
        $A.util.addClass(lookUpTarget, 'slds-hide');
        $A.util.removeClass(lookUpTarget, 'slds-show'); 
        
    },
    
     // Function used to populate the custom lookup 'Assigned To' linked to the edition of the follow up Task
     editPopulateAssignToFollowTaskInit: function(component,ownerIds) {
         if (!component.get("v.isRecordTypeId")){
             var listCustomLookup = component.find("lookupAssignToFollowTask");
             if (!Array.isArray(listCustomLookup)) {
                 listCustomLookup = [listCustomLookup];
             }
             var action = component.get("c.getUser");
             action.setParams({"ownerIds": ownerIds});
             action.setCallback(this, function(response){
                 var state = response.getState();
                 if (state === "SUCCESS") {
                     
                     for(var i=0;i&lt;=listCustomLookup.length-1;i++)
                     {   
                         listCustomLookup[i].set("v.selectedRecord" , response.getReturnValue()[i]);
                         var forclose = listCustomLookup[i].find("lookup-pill");
                         $A.util.addClass(forclose, 'slds-show');
                         $A.util.removeClass(forclose, 'slds-hide');
                         
                         var forclose = listCustomLookup[i].find("searchRes");
                         $A.util.addClass(forclose, 'slds-is-close');
                         $A.util.removeClass(forclose, 'slds-is-open');
                         
                         var lookUpTarget = listCustomLookup[i].find("lookupField");
                         $A.util.addClass(lookUpTarget, 'slds-hide');
                         $A.util.removeClass(lookUpTarget, 'slds-show'); 
                     }
                 }
                 else if (state === "ERROR") {              
                     var errors = response.getError();
                     if (errors) {
                         console.log("ERROR : ",JSON.stringify(errors),errors[0]);
                     }
                 }
             }); 
             $A.enqueueAction(action);
         }
    },
    
     // Function used to validate the different lookups 'Assigned To' , 'Related To' ,' Product/Strategy 1','Natixis Investment Managers' and number of contacts to up to 50
    validateFields: function(component,event){
        var isValid = true;
        var lValUser = component.get("v.selectedLookUpUserRecord");
        var lValAccount = component.get("v.selectedLookUpAccountRecord"); 
        var lValNIM = component.get("v.selectedLookUpShareMinutes");
        var isShareMinutesInternally = component.get("v.isShareMinutesInternally");
        var toastEvent = $A.get("e.force:showToast");
        var meetingType = component.get("v.meetingType");
        var tmpProduit1 = component.get("v.selectedLookUpProductRecord1").Id;
        var taskContacts = component.get("v.taskContacts");
  var taskInternalParticipants = component.get("v.taskInternalParticipants");
        
        if(lValUser.Id == undefined){
            isValid = false ;
            toastEvent.setParams({
                "mode": "dismissable",
                "message": "Assigned To Lookup field is required...Please select User",
                "type" :"error"
                
            });
            isValid= false;
        }
        if(lValAccount.Id == undefined){
            isValid = false ;
            toastEvent.setParams({
                "mode": "dismissable",
                "message": "Related To Lookup field is required...Please select Account",
                "type" :"error"
                
            });
            isValid= false;
        }
        if( isShareMinutesInternally && lValNIM.length == 0){
            isValid = false;
            toastEvent.setParams({
                "mode": "dismissable",
                "message": "Natixis Investment Managers Lookup field is required...Please select Natixis Investment Managers",
                "type" :"error"
                
            });
            isValid= false;
        }
        //if Product Related Meeting and product is empty
        if (meetingType == '0' && tmpProduit1 == undefined){ 
            toastEvent.setParams({
                "mode": "dismissable",
                "message": "Product/Strategy 1 Lookup field is required",
                "type" :"error"
                
            });
            isValid= false;
        }
        //A task can be linked to up to 50 contacts
        if(taskContacts.length> 49){
            toastEvent.setParams({
                "mode": "dismissable",
                "message": "A task can be linked to up to 50 contacts",
                "type" :"error"
                
            });
            isValid= false;
        }
  //A task can be linked to up to 50 Internal Participants
        if(taskInternalParticipants.length> 49){
            toastEvent.setParams({
                "mode": "dismissable",
                "message": "A task can be linked to up to 50 Internal Participants",
                "type" :"error"
                
            });
            isValid= false;
        }
        toastEvent.fire();
        return isValid;
   },
    
    getAccount : function (component,event){        
        var action = component.get("c.getAccount");
        var recordId = component.get("v.recordId");
        //Edit minutes
        if (recordId != undefined && recordId.startsWith("a1S")){
           action.setParams({"whatId": component.get("v.tsk.WhatId")});
        }
         
        else
        { //Save new task minutes
            if (component.get("v.pageReference") !=null){
                action.setParams({"whatId": component.get("v.pageReference").state.c__WhatId});
            }else{
                action.setParams({"whatId": null});
            }
        }
        action.setCallback(this, function(response){
            var state = response.getState();
            if (state === "SUCCESS") {
                component.set("v.account", response.getReturnValue());
                var account = component.get("v.account");      
                this.populateRelatedToLookup(component,account);
                var recordTypeId =account.RecordTypeId.startsWith("0120J000000cmdr");
                if (recordTypeId){
                    component.set("v.isRecordTypeId", true);  
                }
            }
            else if (state === "ERROR") {              
                var errors = response.getError();
                if (errors) {
                    console.log("ERROR : ",JSON.stringify(errors),errors[0]);
                    if (errors[0]) {
                        component.set("v.errorMessage",errors[0].message);               
                    } else {
                        component.set('v.errorMessage', "ERROR : Unknown error");
                    }
                    
                }
            }  
        }); 
        $A.enqueueAction(action);
    },
    
    getAccountOpportunity : function (component,event){    
        var action = component.get("c.getOpportunity");
        var recordId = component.get("v.recordId");
        //Edit minutes
        if (recordId != undefined && recordId.startsWith("a1S")){
            action.setParams({"whatId": component.get("v.tsk.WhatId")});
        }
        else
        {
            //Save new task minutes
            action.setParams({"whatId": component.get("v.pageReference").state.c__WhatId});
        }
        action.setCallback(this, function(response){
            var state = response.getState();
            if (state === "SUCCESS") {
                component.set("v.opportunity", response.getReturnValue());
                var opportunity = component.get("v.opportunity");      
                this.populateRelatedToLookup(component,opportunity);
                var recordTypeId =opportunity.RecordTypeId.startsWith("0120J000000cmdr");
                if (recordTypeId){
                    component.set("v.isRecordTypeId", true);  
                    console.log(" #### RecordTypeId  ====> : ",recordTypeId);
                }
            }
            else if (state === "ERROR") {              
                var errors = response.getError();
                if (errors) {
                    console.log("ERROR : ",JSON.stringify(errors),errors[0]);
                    if (errors[0]) {
                        component.set("v.errorMessage",errors[0].message);               
                    } else {
                        component.set('v.errorMessage', "ERROR : Unknown error");
                    }
                    
                }
            }  
        }); 
        $A.enqueueAction(action);
    },
    
    getOwnerNameOpportunity : function (component,event){   
        var action = component.get("c.getOwnerNameFromOpportunity");
        var recordId = component.get("v.recordId");
         //Edit minutes
        if (recordId != undefined && recordId.startsWith("a1S")){
            action.setParams({"whatId": component.get("v.tsk.WhatId")});
        }
        else
        { //Save new task minutes
            action.setParams({"whatId": component.get("v.pageReference").state.c__WhatId});
        }
        
        action.setCallback(this, function(response) { 
            var state = response.getState();
            if (state === "SUCCESS") {
                var toReturn = response.getReturnValue();
                component.set("v.taskFollowUser", toReturn.userToReturn);
                var user = component.get("v.taskFollowUser");
                this.populateAssignToLookup(component,user);
                this.populateProductLookup(component, toReturn.prodToReturn);
                // if isRecordTypeId is true , Next Steps/ Due Date doesn't exist
                if (component.get("v.isRecordTypeId") == false && recordId == undefined ){
                    this.populateAssignToFollowTaskInit(component,user);
                }
            }
            else if (state === "ERROR") {              
                var errors = response.getError();
                if (errors) {
                    console.log("ERROR : ",JSON.stringify(errors),errors[0]);
                    if (errors[0]) {
                        component.set("v.errorMessage",errors[0].message);               
                    } else {
                        component.set('v.errorMessage', "ERROR : Unknown error");
                    }
                    
                }
            }
        }); 
        $A.enqueueAction(action);
    },
    
    getOwnerName : function (component,event){              
        var action = component.get("c.getOwnerName");
        var recordId = component.get("v.recordId");
    //Edit minutes
        if (recordId != undefined && recordId.startsWith("a1S")){
            action.setParams({"whatId": component.get("v.tsk.WhatId")});
        }
        else
        {  //Save new task minutes
            if (component.get("v.pageReference") !=null){
                action.setParams({"whatId": component.get("v.pageReference").state.c__WhatId});
            }else{
                action.setParams({"whatId": null});
            }
        }
        action.setCallback(this, function(response) { 
            var state = response.getState();
            if (state === "SUCCESS") {
                component.set("v.taskFollowUser", response.getReturnValue());
                var user = component.get("v.taskFollowUser");
                this.populateAssignToLookup(component,user);
                
                // if isRecordTypeId is true , Next Steps/ Due Date doesn't exist
                if (component.get("v.isRecordTypeId") == false && recordId == undefined ){
                    this.populateAssignToFollowTaskInit(component,user);
                }
            }
            else if (state === "ERROR") {              
                var errors = response.getError();
                if (errors) {
                    console.log("ERROR : ",JSON.stringify(errors),errors[0]);
                    if (errors[0]) {
                        component.set("v.errorMessage",errors[0].message);               
                    } else {
                        component.set('v.errorMessage', "ERROR : Unknown error");
                    }
                    
                }
            }  
        }); 
        $A.enqueueAction(action);
    },
    
    getContactName : function(component,event){
        var action = component.get("c.getContactName");
        var recordId = component.get("v.recordId");
         //Edit minutes
        if (recordId != undefined && recordId.startsWith("a1S")){
            action.setParams({"whoId": component.get("v.tsk.WhoId")});
        }
        else
        { //Save new task minutes
            if (component.get("v.pageReference") !=null){
                action.setParams({"whoId": component.get("v.pageReference").state.c__WhoId});
            }else{
                action.setParams({"whoId": null});
            }
        }
        
        action.setCallback(this, function(response){
            var state = response.getState();
            if (state === "SUCCESS") {
                component.set("v.contact", response.getReturnValue());
                var contact = component.get("v.contact"); 
                this.populateContactNameLookup(component,contact);    
            }
            else if (state === "ERROR") {              
                var errors = response.getError();
                if (errors) {
                    console.log("ERROR : ",JSON.stringify(errors),errors[0]);
                    if (errors[0]) {
                        component.set("v.errorMessage",errors[0].message);               
                    } else {
                        component.set('v.errorMessage', "ERROR : Unknown error");
                    }
                    
                }
            }  
        }); 
        $A.enqueueAction(action);
    },
    
    loadTask:function (component,event){
        if (component.get("v.pageReference") != null){
            var action = component.get("c.loadTaskContext");
            action.setParams({"whatId": component.get("v.pageReference").state.c__WhatId,
                              "whoId": component.get("v.pageReference").state.c__WhoId,
                              "minutesType": component.get("v.pageReference").state.c__minutesType,
                              "subject": component.get("v.pageReference").state.c__subject,
                              "visitedCountry": component.get("v.pageReference").state.c__visitedCountry,
                              "retUrl": component.get("v.pageReference").state.c__retUrl,
                              "rtName": component.get("v.pageReference").state.c__rtName
                             });
            
            action.setCallback(this, function(response) {
                var state = response.getState();
                if (state === "SUCCESS") {
                    component.set("v.tsk", response.getReturnValue());
                }
                else if (state === "ERROR") {              
                    var errors = response.getError();
                    if (errors) {
                        console.log("ERROR : ",JSON.stringify(errors),errors[0]);
                        if (errors[0]) {
                            component.set("v.errorMessage",errors[0].message);               
                        } else {
                            component.set('v.errorMessage', "ERROR : Unknown error");
                        }
                        
                    }
                }  
            }); 
            $A.enqueueAction(action);
        }
    },
    
    loadMinutes:function (component,event){
        if (component.get("v.pageReference") != null){
            var action = component.get("c.loadMinuteContext");
            action.setParams({ "rtName": component.get("v.pageReference").state.c__rtName});    
            action.setCallback(this, function(response){
                var state = response.getState();
                if (state === "SUCCESS") {
                    component.set("v.virtualMinute", response.getReturnValue());     
                }
                else if (state === "ERROR") {              
                    var errors = response.getError();
                    if (errors) {
                        console.log("ERROR : ",JSON.stringify(errors),errors[0]);
                        if (errors[0]) {
                            component.set("v.errorMessage",errors[0].message);               
                        } else {
                            component.set('v.errorMessage', "ERROR : Unknown error");
                        }
                        
                    }
                }  
            }); 
            $A.enqueueAction(action);
        }
    },
    
    fetchPicklistValues: function(component,objDetails,controllerField, dependentField, rTName,taskRecordTypeId,recordId) {
        // call the server side function  
        var action = component.get("c.getDependentMap");
        // pass paramerters [object definition , contrller field name ,dependent field name] -
        // to server side function 
        action.setParams({
            'objDetail' : objDetails,
            'contrfieldApiName': controllerField,
            'depfieldApiName': dependentField,
            'rtName' : rTName,
            'taskRecordTypeId' : taskRecordTypeId,
            'recordId' : recordId
        });
        //set callback   
        action.setCallback(this, function(response) {
            if (response.getState() == "SUCCESS") {
                //store the return response from server (map<string>>)  
                var StoreResponse = response.getReturnValue();
                
                // once set #StoreResponse to depnedentFieldMap attribute 
                component.set("v.depnedentFieldMap",StoreResponse);                
                // create a empty array for store map keys(@@---&gt;which is controller picklist values) 
                var listOfkeys = []; // for store all map keys (controller picklist values)
                var ControllerField = []; // for store controller picklist value to set on lightning:select. 
                
                // play a for loop on Return map 
                // and fill the all map key on listOfkeys variable.
                for (var singlekey in StoreResponse) {
                    listOfkeys.push(singlekey);
                }
                
                //set the controller field value for lightning:select
                if (listOfkeys != undefined && listOfkeys.length > 0) {
                   
                    if(component.get("v.tsk.Minutes_Type__c")!=null && component.get("v.tsk.Minutes_Type__c")!=undefined)
                    {
                        ControllerField.push(component.get("v.tsk.Minutes_Type__c"));
                    }
                    else
                    {
                        ControllerField.push("--- None ---");
                    }
                    
                }
                
                for (var i = 0; i < listOfkeys xss=removed xss=removed xss=removed k=1;k xss=removed tmpProduit!=null xss=removed xss=removed xss=removed xss=removed xss=removed xss=removed>  ",product);
                        var pdt="pdt"+k;
                        this.populateProductsLookup(component,product,pdt);
                        var ids = [];
                        ids.push(component.get("v.selectedLookUpProductRecord1").Id,component.get("v.selectedLookUpProductRecord2").Id,component.get("v.selectedLookUpProductRecord3").Id,component.get("v.selectedLookUpProductRecord4").Id,component.get("v.selectedLookUpProductRecord5").Id);
                        var productIds=JSON.stringify(ids);
                        component.set("v.virtualMinuteIds",productIds);
                         console.log("productIds   ===>  ",productIds);
                        var action =  component.get("c.generateMinutes");
                        action.setParams({"virtualMinutesIds": productIds});
                        action.setCallback(this, function(response) {
                            var state = response.getState();
                            if (state === "SUCCESS") { 
                                var response = response.getReturnValue();
                                var minutesMap = [];
                                for (var key in response) {
                                    minutesMap.push({value:component.get("v.virtualMinute.Minutes_for_Affiliate_Communication__c"), key:key});
                                }
                                component.set("v.affiliates", minutesMap);

                            }
                            
                        });     
                        $A.enqueueAction(action);
                    }
                    
                    else if (state === "ERROR") {              
                        var errors = response.getError();
                        if (errors) {
                            console.log("ERROR : ",JSON.stringify(errors),errors[0]);
                            if (errors[0]) {
                                component.set("v.errorMessage",errors[0].message);               
                            } else {
                                component.set('v.errorMessage', "ERROR : Unknown error");
                            }
                            
                        }
                    }  
                }); 
                $A.enqueueAction(action);
            }
        }
        
    },
      // Function used to populate the custom lookup 'Product/Strategy 1/2/3/4/5' (Edit mode)
      populateProductsLookup: function(component,product,pdt) {
      console.log("##### pdt after "+pdt);
        component.find(pdt).set("v.selectedRecord" , product); 
        
        var forclose = component.find(pdt).find("lookup-pill");
        $A.util.addClass(forclose, 'slds-show');
        $A.util.removeClass(forclose, 'slds-hide');
        
        var forclose = component.find(pdt).find("searchRes");
        $A.util.addClass(forclose, 'slds-is-close');
        $A.util.removeClass(forclose, 'slds-is-open');
        
        var lookUpTarget = component.find(pdt).find("lookupField");
        $A.util.addClass(lookUpTarget, 'slds-hide');
        $A.util.removeClass(lookUpTarget, 'slds-show'); 
      
    },
    
    // Function used to get all 'Next steps / Action plan /Due Date' already registred during the save minute task (Edit mode)
    loadWrapperList : function(component){
        
        var user = component.get("v.taskFollowUser");
        var listWrapper = component.get("v.wrapperList");
  console.log("wrapperList ==> ",listWrapper);

            if ( component.get("v.virtualMinute.Next_steps_Action_plan_1__c")    != null &&    component.get("v.virtualMinute.Next_steps_Due_Date_1__c") !=null){              
                listWrapper.push({'sobjectType':'wrapperClass','nextSteps':component.get("v.virtualMinute.Next_steps_Action_plan_1__c"),'dueDate':component.get("v.virtualMinute.Next_steps_Due_Date_1__c"),'selectedUser':user});
            }
            if ( component.get("v.virtualMinute.Next_steps_Action_plan_2__c")    != null &&    component.get("v.virtualMinute.Next_steps_Due_Date_2__c") !=null){              
                listWrapper.push({'sobjectType':'wrapperClass','nextSteps':component.get("v.virtualMinute.Next_steps_Action_plan_2__c"),'dueDate':component.get("v.virtualMinute.Next_steps_Due_Date_2__c"),'selectedUser':user});
            }
            if ( component.get("v.virtualMinute.Next_steps_Action_plan_3__c")    != null &&    component.get("v.virtualMinute.Next_steps_Due_Date_3__c") !=null){              
                listWrapper.push({'sobjectType':'wrapperClass','nextSteps':component.get("v.virtualMinute.Next_steps_Action_plan_3__c"),'dueDate':component.get("v.virtualMinute.Next_steps_Due_Date_3__c"),'selectedUser':user});
            }
        
        component.set("v.wrapperList",listWrapper);
        console.log('listWrapper : ===>  ',listWrapper);
    },
    

})